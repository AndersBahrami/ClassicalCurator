/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.classicalcurator;

import com.google.gson.Gson;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLEncoder;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author andersbahrami
 */
public class ClassicalCurator extends javax.swing.JFrame{

    ArrayList<Playlist> playlists;
    private static String baseURI_GET_OpenOpus = "https://api.openopus.org";
    private static String baseURI_POST_OpenOpus = "https://dynapi.openopus.org";
    
    
    /**
     * Creates new form MainWindow
     */
    public ClassicalCurator() throws Exception {
        initComponents();
        playlists = new ArrayList<Playlist>();
        setComposerImage("https://assets.openopus.org/portraits/12091447-1568084857.jpg", Search_ComposerImageLabel);
        setComposerImage("https://assets.openopus.org/portraits/12091447-1568084857.jpg", Playlists_ComposerImageLabel);
        buildTable(null, Search_PieceTable);
        buildTable(null, Playlists_PieceTable);
        buildTable(null, Reccomended_PieceTable);
        
        playlists.add(new Playlist("My Composers"));
        playlists.add(new Playlist("Favorites"));
        
        buildPlaylistTable(playlists);
        buildComboBox();
        
        //ArrayList<String> params = new ArrayList<>(Arrays.asList("popularwork", "epoch"));
        //ArrayList<String> vals = new ArrayList<>(Arrays.asList("1", "Baroque"));
        //System.out.println(getRandomWorks(params, vals));
        //setComposerImage(getRequest("/composer/list/ids/" + getRandomWorks(params, vals) + ".json"));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Search_WorkNameLabel2 = new javax.swing.JLabel();
        Search_ComposerNameLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Search_WorkNameLabel3 = new javax.swing.JLabel();
        jDialog1 = new javax.swing.JDialog();
        NewPlaylist_TextField = new javax.swing.JTextField();
        NewPlaylist_Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        jTabbedPane = new javax.swing.JTabbedPane();
        Playlists_jPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Playlists_PieceTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        Playlists_WorkNameLabel1 = new javax.swing.JLabel();
        Playlists_WorkNameLabel = new javax.swing.JLabel();
        Playlists_ComposerNameLabel = new javax.swing.JLabel();
        Playlists_ComposerImageLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Playlists_SavedPlaylistTable = new javax.swing.JTable();
        Playlists_NewPlaylistButton = new javax.swing.JButton();
        Playlists_DeletePlaylistButton = new javax.swing.JButton();
        Playlists_AddPieceButton = new javax.swing.JButton();
        Playlists_RemovePieceButton = new javax.swing.JButton();
        Search_jPanel = new javax.swing.JPanel();
        Search_SearchBar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Search_PieceTable = new javax.swing.JTable();
        Search_SearchButton = new javax.swing.JButton();
        Search_AddToPlaylistButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        Search_WorkNameLabel = new javax.swing.JLabel();
        Search_WorkNameLabel1 = new javax.swing.JLabel();
        Search_FindSimilarMusic = new javax.swing.JButton();
        Search_SearchComposersMusic = new javax.swing.JButton();
        Search_ComposerImageLabel = new javax.swing.JLabel();
        Search_ComposerNameLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        Genre_ComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        SearchComposers_CheckBox = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        EssentialWorks_CheckBox = new javax.swing.JCheckBox();
        PopularWorks_CheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        Epoch_ComboBox = new javax.swing.JComboBox<>();
        Reccomendations_jPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Reccomended_PieceTable = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        Reccomended_WorkNameLabel1 = new javax.swing.JLabel();
        Reccomended_WorkNameLabel = new javax.swing.JLabel();
        Reccomended_ComposerNameLabel = new javax.swing.JLabel();
        Reccomended_ComposerImageLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        Reccomended_ComposersTable = new javax.swing.JTable();
        Search_AddToPlaylistButton1 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        Reccomended_GetReccomended = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        Reccomended_AddToPlaylistButton = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();

        Search_WorkNameLabel2.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        Search_WorkNameLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Search_WorkNameLabel2.setText("Title:");
        Search_WorkNameLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Search_ComposerNameLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Search_ComposerNameLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Search_ComposerNameLabel1.setText("Composer:");
        Search_ComposerNameLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Search_WorkNameLabel3.setFont(new java.awt.Font("Telugu Sangam MN", 0, 20)); // NOI18N
        Search_WorkNameLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Search_WorkNameLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setAlwaysOnTop(true);
        jDialog1.setBackground(new java.awt.Color(153, 153, 255));
        jDialog1.setLocation(new java.awt.Point(100, 100));
        jDialog1.setMinimumSize(new java.awt.Dimension(360, 170));

        NewPlaylist_Button.setBackground(new java.awt.Color(153, 186, 219));
        NewPlaylist_Button.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        NewPlaylist_Button.setText("Create");
        NewPlaylist_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewPlaylist_ButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Give Your Playlist a Name");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NewPlaylist_TextField)
                .addContainerGap())
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(NewPlaylist_Button))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NewPlaylist_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NewPlaylist_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane.setBackground(new java.awt.Color(153, 186, 219));

        Playlists_jPanel.setBackground(new java.awt.Color(153, 186, 219));

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        Playlists_PieceTable.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 20)); // NOI18N
        Playlists_PieceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Music"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Playlists_PieceTable.setRowHeight(50);
        Playlists_PieceTable.getTableHeader().setReorderingAllowed(false);
        Playlists_PieceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Playlists_PieceTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(Playlists_PieceTable);
        if (Playlists_PieceTable.getColumnModel().getColumnCount() > 0) {
            Playlists_PieceTable.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanel2.setBackground(new java.awt.Color(226, 226, 226));

        Playlists_WorkNameLabel1.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        Playlists_WorkNameLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Playlists_WorkNameLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Playlists_WorkNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        Playlists_WorkNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Playlists_WorkNameLabel.setText("Currently Selected Piece:");
        Playlists_WorkNameLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Playlists_ComposerNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Playlists_ComposerNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Playlists_ComposerNameLabel.setText("Composer:");
        Playlists_ComposerNameLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Playlists_ComposerImageLabel.setBackground(new java.awt.Color(244, 216, 216));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Playlists_WorkNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Playlists_WorkNameLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Playlists_ComposerImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(Playlists_ComposerNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Playlists_WorkNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Playlists_WorkNameLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Playlists_ComposerNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Playlists_ComposerImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        Playlists_SavedPlaylistTable.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 20)); // NOI18N
        Playlists_SavedPlaylistTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Saved Playlists"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Playlists_SavedPlaylistTable.setRowHeight(35);
        Playlists_SavedPlaylistTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Playlists_SavedPlaylistTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(Playlists_SavedPlaylistTable);
        if (Playlists_SavedPlaylistTable.getColumnModel().getColumnCount() > 0) {
            Playlists_SavedPlaylistTable.getColumnModel().getColumn(0).setResizable(false);
        }

        Playlists_NewPlaylistButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Playlists_NewPlaylistButton.setText("New");
        Playlists_NewPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Playlists_NewPlaylistButtonActionPerformed(evt);
            }
        });

        Playlists_DeletePlaylistButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Playlists_DeletePlaylistButton.setText("Delete");
        Playlists_DeletePlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Playlists_DeletePlaylistButtonActionPerformed(evt);
            }
        });

        Playlists_AddPieceButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Playlists_AddPieceButton.setText("Add");
        Playlists_AddPieceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Playlists_AddPieceButtonActionPerformed(evt);
            }
        });

        Playlists_RemovePieceButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Playlists_RemovePieceButton.setText("Remove");
        Playlists_RemovePieceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Playlists_RemovePieceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Playlists_jPanelLayout = new javax.swing.GroupLayout(Playlists_jPanel);
        Playlists_jPanel.setLayout(Playlists_jPanelLayout);
        Playlists_jPanelLayout.setHorizontalGroup(
            Playlists_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Playlists_jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Playlists_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Playlists_jPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Playlists_jPanelLayout.createSequentialGroup()
                        .addComponent(Playlists_NewPlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Playlists_DeletePlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Playlists_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Playlists_RemovePieceButton)
                    .addComponent(Playlists_AddPieceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        Playlists_jPanelLayout.setVerticalGroup(
            Playlists_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Playlists_jPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(Playlists_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Playlists_jPanelLayout.createSequentialGroup()
                        .addComponent(Playlists_AddPieceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Playlists_RemovePieceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Playlists_jPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(Playlists_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Playlists_DeletePlaylistButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Playlists_NewPlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("Playlists", Playlists_jPanel);

        Search_jPanel.setBackground(new java.awt.Color(153, 186, 219));

        Search_SearchBar.setFont(new java.awt.Font("Kohinoor Gujarati", 0, 13)); // NOI18N
        Search_SearchBar.setText("Search Music and/or Composers");

        jLabel2.setFont(new java.awt.Font("LiSong Pro", 0, 13)); // NOI18N
        jLabel2.setText("Use \"by:\" keyword to indicate Composer ");

        Search_PieceTable.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 20)); // NOI18N
        Search_PieceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Search Results"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Search_PieceTable.setRowHeight(50);
        Search_PieceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Search_PieceTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Search_PieceTable);
        if (Search_PieceTable.getColumnModel().getColumnCount() > 0) {
            Search_PieceTable.getColumnModel().getColumn(0).setResizable(false);
        }

        Search_SearchButton.setText("Search");
        Search_SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_SearchButtonActionPerformed(evt);
            }
        });

        Search_AddToPlaylistButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Search_AddToPlaylistButton.setText("Add To Playlist");
        Search_AddToPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_AddToPlaylistButtonActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jPanel3.setBackground(new java.awt.Color(124, 124, 124));

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));

        Search_WorkNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        Search_WorkNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Search_WorkNameLabel.setText("Piece Title:");
        Search_WorkNameLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Search_WorkNameLabel1.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        Search_WorkNameLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Search_WorkNameLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Search_WorkNameLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Search_WorkNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Search_WorkNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Search_WorkNameLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Search_WorkNameLabel.getAccessibleContext().setAccessibleName("Name of Work*");

        Search_FindSimilarMusic.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Search_FindSimilarMusic.setText("Find Similar Music");
        Search_FindSimilarMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_FindSimilarMusicActionPerformed(evt);
            }
        });

        Search_SearchComposersMusic.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Search_SearchComposersMusic.setText("More by Composer");
        Search_SearchComposersMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_SearchComposersMusicActionPerformed(evt);
            }
        });

        Search_ComposerNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Search_ComposerNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Search_ComposerNameLabel.setText("Composed by:");
        Search_ComposerNameLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Search_FindSimilarMusic)
                            .addComponent(Search_SearchComposersMusic)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(Search_ComposerImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 56, Short.MAX_VALUE))
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Search_ComposerNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Search_ComposerNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Search_ComposerImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(Search_SearchComposersMusic, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Search_FindSimilarMusic, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        jPanel4.setBackground(new java.awt.Color(124, 124, 124));

        Genre_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Popular", "Recommended", "Chamber", "Keyboard", "Orchestral", "Vocal" }));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel5.setText("Epoch");

        SearchComposers_CheckBox.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        SearchComposers_CheckBox.setText("Search Composers");

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        jLabel4.setBackground(new java.awt.Color(204, 204, 255));
        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText(" Customize Search");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        EssentialWorks_CheckBox.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        EssentialWorks_CheckBox.setText("Essential Works");

        PopularWorks_CheckBox.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        PopularWorks_CheckBox.setText("Popular Works");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel6.setText("Genre");

        Epoch_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Medieval", "Renaissance", "Baroque", "Classical", "Early Romantic", "Romantic", "Late Romantic", "20th Century", "Post-War", "21st Century" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Epoch_ComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Genre_ComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(14, 14, 14))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(EssentialWorks_CheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SearchComposers_CheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(PopularWorks_CheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(SearchComposers_CheckBox)
                .addGap(66, 66, 66)
                .addComponent(EssentialWorks_CheckBox)
                .addGap(30, 30, 30)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Epoch_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Genre_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(131, 131, 131)
                    .addComponent(PopularWorks_CheckBox)
                    .addContainerGap(442, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout Search_jPanelLayout = new javax.swing.GroupLayout(Search_jPanel);
        Search_jPanel.setLayout(Search_jPanelLayout);
        Search_jPanelLayout.setHorizontalGroup(
            Search_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Search_jPanelLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Search_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(Search_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Search_jPanelLayout.createSequentialGroup()
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Search_AddToPlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(Search_jPanelLayout.createSequentialGroup()
                            .addGroup(Search_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Search_jPanelLayout.createSequentialGroup()
                                    .addComponent(Search_SearchBar)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Search_SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(12, 12, 12)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Search_jPanelLayout.setVerticalGroup(
            Search_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Search_jPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(Search_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(Search_jPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(Search_jPanelLayout.createSequentialGroup()
                        .addGroup(Search_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Search_SearchBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Search_SearchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)))
                .addGroup(Search_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Search_AddToPlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("Search", Search_jPanel);

        Reccomendations_jPanel.setBackground(new java.awt.Color(153, 186, 219));

        jPanel8.setBackground(new java.awt.Color(88, 88, 88));

        Reccomended_PieceTable.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 20)); // NOI18N
        Reccomended_PieceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Reccomended Music"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Reccomended_PieceTable.setRowHeight(50);
        Reccomended_PieceTable.getTableHeader().setReorderingAllowed(false);
        Reccomended_PieceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Reccomended_PieceTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(Reccomended_PieceTable);
        if (Reccomended_PieceTable.getColumnModel().getColumnCount() > 0) {
            Reccomended_PieceTable.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanel7.setBackground(new java.awt.Color(226, 226, 226));

        Reccomended_WorkNameLabel1.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        Reccomended_WorkNameLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Reccomended_WorkNameLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Reccomended_WorkNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        Reccomended_WorkNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Reccomended_WorkNameLabel.setText("Currently Selected Piece:");
        Reccomended_WorkNameLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Reccomended_ComposerNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Reccomended_ComposerNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Reccomended_ComposerNameLabel.setText("Composer:");
        Reccomended_ComposerNameLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Reccomended_ComposerImageLabel.setBackground(new java.awt.Color(244, 216, 216));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Reccomended_WorkNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Reccomended_WorkNameLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Reccomended_ComposerImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Reccomended_ComposerNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(Reccomended_WorkNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Reccomended_WorkNameLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(Reccomended_ComposerNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Reccomended_ComposerImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Reccomended_ComposersTable.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 20)); // NOI18N
        Reccomended_ComposersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Reccomended Composers"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Reccomended_ComposersTable.setRowHeight(35);
        Reccomended_ComposersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Reccomended_ComposersTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(Reccomended_ComposersTable);
        if (Reccomended_ComposersTable.getColumnModel().getColumnCount() > 0) {
            Reccomended_ComposersTable.getColumnModel().getColumn(0).setResizable(false);
        }

        Search_AddToPlaylistButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Search_AddToPlaylistButton1.setText("Add Composer");
        Search_AddToPlaylistButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_AddToPlaylistButton1ActionPerformed(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(204, 204, 204));

        Reccomended_GetReccomended.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Reccomended_GetReccomended.setText("Get Reccomended");
        Reccomended_GetReccomended.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reccomended_GetReccomendedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Reccomended_GetReccomended, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(Reccomended_GetReccomended, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(124, 124, 124));

        Reccomended_AddToPlaylistButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Reccomended_AddToPlaylistButton.setText("Add To Playlist");
        Reccomended_AddToPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reccomended_AddToPlaylistButtonActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Reccomended_AddToPlaylistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Reccomended_AddToPlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(438, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout Reccomendations_jPanelLayout = new javax.swing.GroupLayout(Reccomendations_jPanel);
        Reccomendations_jPanel.setLayout(Reccomendations_jPanelLayout);
        Reccomendations_jPanelLayout.setHorizontalGroup(
            Reccomendations_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Reccomendations_jPanelLayout.createSequentialGroup()
                .addGroup(Reccomendations_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 14, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(Reccomendations_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Reccomendations_jPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Reccomendations_jPanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(Search_AddToPlaylistButton1)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        Reccomendations_jPanelLayout.setVerticalGroup(
            Reccomendations_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(Reccomendations_jPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Search_AddToPlaylistButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(Reccomendations_jPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane.addTab("Reccomended", Reccomendations_jPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 965, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Playlists_RemovePieceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Playlists_RemovePieceButtonActionPerformed
        
        int row = Playlists_SavedPlaylistTable.getSelectedRow();
        if (row < 0){
            return;
        }
        
        Playlist playlist = (Playlist) Playlists_SavedPlaylistTable.getValueAt(row, 0);
        
        int row2 = Playlists_PieceTable.getSelectedRow();
        
        if (row2 < 0){
            return;
        }
        
        Piece piece = (Piece) Playlists_PieceTable.getValueAt(row2, 0);
        
        playlist.remove(piece);
        
        buildTable(playlist, Playlists_PieceTable);
        
    }//GEN-LAST:event_Playlists_RemovePieceButtonActionPerformed

    private void Playlists_AddPieceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Playlists_AddPieceButtonActionPerformed
        
        buildComboBox();
        jTabbedPane.setSelectedIndex(1);
        jComboBox1.setSelectedIndex(Playlists_SavedPlaylistTable.getSelectedRow());
        
        
    }//GEN-LAST:event_Playlists_AddPieceButtonActionPerformed

    private void Playlists_DeletePlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Playlists_DeletePlaylistButtonActionPerformed
        
        int row = Playlists_SavedPlaylistTable.getSelectedRow();
        playlists.remove(Playlists_SavedPlaylistTable.getValueAt(row, 0));
        
        buildPlaylistTable(playlists);
        buildTable(null, Playlists_PieceTable);
        
    }//GEN-LAST:event_Playlists_DeletePlaylistButtonActionPerformed

    private void Playlists_PieceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Playlists_PieceTableMouseClicked
        
        //gets selected row
        int row = Playlists_PieceTable.getSelectedRow();
        if (Playlists_PieceTable.getValueAt(row, 0) == null){
            return;
        }
        
        Composer selectedComposer = ((Piece)Playlists_PieceTable.getValueAt(row, 0)).getComposer();
        Work selectedWork = ((Piece)Playlists_PieceTable.getValueAt(row, 0)).getWork();
        
        //if we've selected a populated row with a composer, then populate composer Name+Image in GUI
        if (selectedComposer != null){
            
            //gets composer image
            String image = selectedComposer.getPortrait();
            if (image == null)
            {
                try {
                    image = getComposerImage(selectedComposer);
                } catch (Exception ex) {
                    Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //sets composer image on label
            try {
                setComposerImage(image, Playlists_ComposerImageLabel);
            } catch (Exception ex) {
                Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
            }
            Playlists_ComposerNameLabel.setText(selectedComposer.getComplete_name());
            Playlists_WorkNameLabel1.setText("");
        }
        //if we've selected a populated row with a work, populate work info
        if (selectedWork != null) {
            String title = selectedWork.getTitle();
                
            if (title.length() < 28){
                Playlists_WorkNameLabel.setText(selectedWork.getTitle());
            }
            else{
                Scanner scan = new Scanner(title);
                int sum = 0;
                String word = "";
                int len = 0;
                while (scan.hasNext() && sum < 28){
                    word = scan.next();
                    len = word.length();
                    sum += len + 1;
                    if (sum > 28){
                        sum -= len + 2;
                        break;
                    }
                }
                
                Playlists_WorkNameLabel.setText(selectedWork.getTitle().substring(0, sum));
                Playlists_WorkNameLabel1.setText(selectedWork.getTitle().substring(sum));
            }
        }
        
    }//GEN-LAST:event_Playlists_PieceTableMouseClicked

    private void Playlists_NewPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Playlists_NewPlaylistButtonActionPerformed
        
        jDialog1.setVisible(true);
        
    }//GEN-LAST:event_Playlists_NewPlaylistButtonActionPerformed

    private void Playlists_SavedPlaylistTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Playlists_SavedPlaylistTableMouseClicked
        //populates PieceTable based on selected playlist
        int row = Playlists_SavedPlaylistTable.getSelectedRow();
        Playlist playlist = (Playlist) Playlists_SavedPlaylistTable.getValueAt(row, 0);
        
        buildTable(playlist, Playlists_PieceTable);
        
    }//GEN-LAST:event_Playlists_SavedPlaylistTableMouseClicked

    private void Search_SearchComposersMusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_SearchComposersMusicActionPerformed
        //Poplates Piece Table after Search
        int row = Search_PieceTable.getSelectedRow();
        
        if (row < 0){
            System.out.println("ERROR");
            return;
        }
        
        Piece selectedPiece = (Piece) Search_PieceTable.getValueAt(row, 0);
        Playlist composerPlaylist = null;
        try {
            //getRandomWorks("composer", selectedPiece.getComposer().getComplete_name()).getWorks())
            //composerPlaylist = new Playlist("Music by Composer", new PieceHeap());
            buildTable(getWorksByComposer(selectedPiece.getComposer()), Search_PieceTable);
        } catch (Exception ex) {
            Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_Search_SearchComposersMusicActionPerformed
    private void Search_AddToPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_AddToPlaylistButtonActionPerformed
        //Adds Selected Piece to Selected Playlist
        int row = Search_PieceTable.getSelectedRow();
        int selectedPlaylist = jComboBox1.getSelectedIndex();

        // if Selected Piece is not null
        if (row >= 0 && Search_PieceTable.getValueAt(row, 0) != null){

            Playlist playlist = (Playlist) Playlists_SavedPlaylistTable.getValueAt(selectedPlaylist, 0);
            Piece selectedPiece = (Piece) Search_PieceTable.getValueAt(row, 0);
            playlist.add(selectedPiece);
            
            buildTable(playlist, Playlists_PieceTable);
            Playlists_PieceTable.setRowSelectionInterval(jComboBox1.getSelectedIndex(), 0);
        }
        
    }//GEN-LAST:event_Search_AddToPlaylistButtonActionPerformed

    private void Search_SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_SearchButtonActionPerformed
        //conducts a search
        String text = Search_SearchBar.getText();

        if (text.length() <= 3 && text.length() != 0){
            System.out.println("ERROR: SEARCH TOO SHORT");
        }
        
            try {
                buildTable(generatePlaylist(text), Search_PieceTable);
            } catch (Exception ex) {
                Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
            }
        

    }//GEN-LAST:event_Search_SearchButtonActionPerformed

    private void Search_PieceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Search_PieceTableMouseClicked
        //Populates Work and Composer Information (Image and names)
        int row = Search_PieceTable.getSelectedRow();
        
        if (row < 0) {
            return;
        }
        
        //Checks if selectedPiece is null before instantiating
        Composer selectedComposer = null; 
        Work selectedWork = null; 
        if ((Piece)Search_PieceTable.getValueAt(row, 0) != null){
            selectedComposer = ((Piece)Search_PieceTable.getValueAt(row, 0)).getComposer();
            selectedWork = ((Piece)Search_PieceTable.getValueAt(row, 0)).getWork();
        }
        //Adds Image
        if (selectedComposer != null){
            //System.out.println("currently trying to change the profile picture");
            String image = selectedComposer.getPortrait();
            if (image == null){
                try {
                        image = getComposerImage(selectedComposer);
                        System.out.println(image);
                    } catch (Exception ex) {
                        Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //Sets Composer Image
            try {
                setComposerImage(image, Search_ComposerImageLabel);
            } catch (Exception ex) {
                Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
            }
            Search_ComposerNameLabel.setText(selectedComposer.getComplete_name());
            Search_WorkNameLabel1.setText("");
        }
        //Populates Labels and Title/Composer info
        if (selectedWork != null) {
            String title = selectedWork.getTitle();

            if (title.length() < 25){
                Search_WorkNameLabel.setText(selectedWork.getTitle());
            }
            else{
                Scanner scan = new Scanner(title);
                int sum = 0;
                String word = "";
                int len = 0;
                while (scan.hasNext() && sum < 25){ //Needs debugging
                    word = scan.next();
                    len = word.length();
                    sum += len + 1;
                    if (sum > 25){
                        sum -= len + 2;
                        break;
                    }
                }
                
                //Populates Title Lables
                Search_WorkNameLabel.setText(selectedWork.getTitle().substring(0, sum));
                Search_WorkNameLabel1.setText(selectedWork.getTitle().substring(sum + 1));
            }
        }
    }//GEN-LAST:event_Search_PieceTableMouseClicked

    private void Search_FindSimilarMusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_FindSimilarMusicActionPerformed
        
        //Takes your currently selected piece and find music similar to that piece
        int row = Search_PieceTable.getSelectedRow();
        
        if (row < 0){
            System.out.println("ERROR");
            return;
        }
        
        Piece selectedPiece = (Piece) Search_PieceTable.getValueAt(row, 0);
        Playlist similarPlaylist = null;
        try {
            //fills table with similar pieces
            buildTable(getSimilarPieces(selectedPiece), Search_PieceTable);
        } catch (Exception ex) {
            Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
        }
 
        
        
    }//GEN-LAST:event_Search_FindSimilarMusicActionPerformed

    private void NewPlaylist_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewPlaylist_ButtonActionPerformed
        //Creates a new playlist
        String text = NewPlaylist_TextField.getText();
        if (text == "" || text == null){
            return;
        }
        
        playlists.add(new Playlist(text));
        buildPlaylistTable(playlists);
        buildComboBox();
        
        NewPlaylist_TextField.setText("");
        jDialog1.setVisible(false);
        
    }//GEN-LAST:event_NewPlaylist_ButtonActionPerformed

    private void Reccomended_GetReccomendedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reccomended_GetReccomendedActionPerformed
        
        Playlist playlist = new Playlist();
        
        try {
            buildTable(getReccomendedWorks(), Reccomended_PieceTable);
        } catch (Exception ex) {
            Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            buildTable(getReccomendedComposers(), Reccomended_ComposersTable);
        } catch (Exception ex) {
            Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_Reccomended_GetReccomendedActionPerformed

    private void Reccomended_PieceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Reccomended_PieceTableMouseClicked
        //Populates composer Info and Work Title in Reccomended Tab
        int row = Reccomended_PieceTable.getSelectedRow();
        
        if (row < 0) {
            return;
        }
        
        Composer selectedComposer = ((Piece)Reccomended_PieceTable.getValueAt(row, 0)).getComposer();
        Work selectedWork = ((Piece)Reccomended_PieceTable.getValueAt(row, 0)).getWork();

        if (selectedComposer != null){
           // Tries to change the profile picture
            String image = selectedComposer.getPortrait();
            if (image == null){
                try {
                        image = getComposerImage(selectedComposer);
                    } catch (Exception ex) {
                        Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            try {
                setComposerImage(image, Reccomended_ComposerImageLabel);
            } catch (Exception ex) {
                Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
            }
            Reccomended_ComposerNameLabel.setText(selectedComposer.getComplete_name());
            Reccomended_WorkNameLabel1.setText("");
        }
        if (selectedWork != null) {
            String title = selectedWork.getTitle();

            if (title.length() < 25){
                Reccomended_WorkNameLabel.setText(selectedWork.getTitle());
            }
            else{
                Scanner scan = new Scanner(title);
                int sum = 0;
                String word = "";
                int len = 0;
                //limits the length in a Label to 25 so the titles can span multiple lines
                while (scan.hasNext() && sum < 25){ 
                    word = scan.next();
                    len = word.length();
                    sum += len + 1;
                    if (sum > 25){
                        sum -= len + 2;
                        break;
                    }
                }

                Reccomended_WorkNameLabel.setText(selectedWork.getTitle().substring(0, sum));
                Reccomended_WorkNameLabel1.setText(selectedWork.getTitle().substring(sum + 1));
            }
        }
        
    }//GEN-LAST:event_Reccomended_PieceTableMouseClicked

    private void Reccomended_ComposersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Reccomended_ComposersTableMouseClicked
        //Populates PieceTable with composers music
        int row = Reccomended_ComposersTable.getSelectedRow();
        Composer composer = ((Piece)Reccomended_ComposersTable.getValueAt(row, 0)).getComposer();
        try {
            buildTable(getWorksByComposer(composer), Reccomended_PieceTable);
        } catch (Exception ex) {
            Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_Reccomended_ComposersTableMouseClicked

    private void Search_AddToPlaylistButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_AddToPlaylistButton1ActionPerformed
        //Adds Searched Piece to Playlist
        int row = Reccomended_ComposersTable.getSelectedRow();
        playlists.get(0).add((Piece)Reccomended_ComposersTable.getValueAt(row, 0));
        
        //Updates Selected Playlist
        Playlists_PieceTable.setRowSelectionInterval(0, 0);
        
    }//GEN-LAST:event_Search_AddToPlaylistButton1ActionPerformed

    private void Reccomended_AddToPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reccomended_AddToPlaylistButtonActionPerformed
        //Adds Piece to Selected Playlist
        int row = Reccomended_PieceTable.getSelectedRow();
        int selectedPlaylist = jComboBox2.getSelectedIndex();

        // if Selected Piece is not null
        if (row >= 0 && Reccomended_PieceTable.getValueAt(row, 0) != null){

            Playlist playlist = (Playlist) Playlists_SavedPlaylistTable.getValueAt(selectedPlaylist, 0);
            Piece selectedPiece = (Piece) Reccomended_PieceTable.getValueAt(row, 0);
            playlist.add(selectedPiece);
            
            buildTable(playlist, Playlists_PieceTable);
            Playlists_PieceTable.setRowSelectionInterval(jComboBox2.getSelectedIndex(), 0);
        }
        
        
    }//GEN-LAST:event_Reccomended_AddToPlaylistButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClassicalCurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClassicalCurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClassicalCurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassicalCurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ClassicalCurator().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(ClassicalCurator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Epoch_ComboBox;
    private javax.swing.JCheckBox EssentialWorks_CheckBox;
    private javax.swing.JComboBox<String> Genre_ComboBox;
    private javax.swing.JButton NewPlaylist_Button;
    private javax.swing.JTextField NewPlaylist_TextField;
    private javax.swing.JButton Playlists_AddPieceButton;
    private javax.swing.JLabel Playlists_ComposerImageLabel;
    private javax.swing.JLabel Playlists_ComposerNameLabel;
    private javax.swing.JButton Playlists_DeletePlaylistButton;
    private javax.swing.JButton Playlists_NewPlaylistButton;
    private javax.swing.JTable Playlists_PieceTable;
    private javax.swing.JButton Playlists_RemovePieceButton;
    private javax.swing.JTable Playlists_SavedPlaylistTable;
    private javax.swing.JLabel Playlists_WorkNameLabel;
    private javax.swing.JLabel Playlists_WorkNameLabel1;
    private javax.swing.JPanel Playlists_jPanel;
    private javax.swing.JCheckBox PopularWorks_CheckBox;
    private javax.swing.JPanel Reccomendations_jPanel;
    private javax.swing.JButton Reccomended_AddToPlaylistButton;
    private javax.swing.JLabel Reccomended_ComposerImageLabel;
    private javax.swing.JLabel Reccomended_ComposerNameLabel;
    private javax.swing.JTable Reccomended_ComposersTable;
    private javax.swing.JButton Reccomended_GetReccomended;
    private javax.swing.JTable Reccomended_PieceTable;
    private javax.swing.JLabel Reccomended_WorkNameLabel;
    private javax.swing.JLabel Reccomended_WorkNameLabel1;
    private javax.swing.JCheckBox SearchComposers_CheckBox;
    private javax.swing.JButton Search_AddToPlaylistButton;
    private javax.swing.JButton Search_AddToPlaylistButton1;
    private javax.swing.JLabel Search_ComposerImageLabel;
    private javax.swing.JLabel Search_ComposerNameLabel;
    private javax.swing.JLabel Search_ComposerNameLabel1;
    private javax.swing.JButton Search_FindSimilarMusic;
    private javax.swing.JTable Search_PieceTable;
    private javax.swing.JTextField Search_SearchBar;
    private javax.swing.JButton Search_SearchButton;
    private javax.swing.JButton Search_SearchComposersMusic;
    private javax.swing.JLabel Search_WorkNameLabel;
    private javax.swing.JLabel Search_WorkNameLabel1;
    private javax.swing.JLabel Search_WorkNameLabel2;
    private javax.swing.JLabel Search_WorkNameLabel3;
    private javax.swing.JPanel Search_jPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane;
    // End of variables declaration//GEN-END:variables

    //Make Http GET Request for OpenOpus Data
    public MusicalInformation getRequest(String ePoint) throws Exception{
        String endpoint = ePoint;
        
        //Creates getRequest based off of inputted endpoint
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI(baseURI_GET_OpenOpus + endpoint))
                .GET().build();
        HttpClient httpClient = HttpClient.newHttpClient();
        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        
        //Parses response into musicInfo
        Gson gson = new Gson();
        MusicalInformation musicInfo = new MusicalInformation();
        if (getResponse.body() != null){
            musicInfo = gson.fromJson(getResponse.body(), MusicalInformation.class);
        }
        
        return musicInfo;
    }
    
    //Send Http Post Request with parameters for OpenOpus Data
    public MusicalInformation postRequest(String endpoint, List<String> params, List<String> vals) throws Exception{
        
        String parameters = "?";
        int v = 0;
        for (String param : params){
            parameters += param;
            parameters += "=";
            parameters += vals.get(v);
            parameters += "&";
            v++;
        }
        //Create Http Client
        HttpClient httpClient = HttpClient.newHttpClient();
        
        //Create Http postrequest based on endpoint and parameters
        HttpRequest postRequest = HttpRequest.newBuilder()
                .uri(new URI(baseURI_POST_OpenOpus + endpoint + parameters))
                .POST(BodyPublishers.ofString("")).build();
        //Gets Response
        HttpResponse<String> postResponse = httpClient.send(postRequest, BodyHandlers.ofString());
        
        //Parses Response into musicInfo where data can be easily accessed
        Gson gson = new Gson();
        MusicalInformation musicInfo = new MusicalInformation();
        System.out.println(postResponse.body());
        if (postResponse.body() != null){
            musicInfo = gson.fromJson(postResponse.body(), MusicalInformation.class);
        }
                
        return musicInfo;
    }
    //Creates a post request but for only one parameter
    //Allows easier usage of a postRequest when only one parameter is needed
    public MusicalInformation postRequest(String endpoint, String param, String val) throws Exception{
        
        String parameters = "?" + param + "=" + URLEncoder.encode(val, StandardCharsets.UTF_8);
        
        HttpClient httpClient = HttpClient.newHttpClient();
        HttpRequest postRequest = HttpRequest.newBuilder()
                .uri(new URI(baseURI_POST_OpenOpus + endpoint + parameters))
                .POST(BodyPublishers.ofString("")).build();
        HttpResponse<String> postResponse = httpClient.send(postRequest, BodyHandlers.ofString());
        
        Gson gson = new Gson();
        MusicalInformation musicInfo = new MusicalInformation();
        if (postResponse.body() != null){
            musicInfo = gson.fromJson(postResponse.body(), MusicalInformation.class);    
        }
        
        return musicInfo;
    }
    
    //Sets the image of a label to the inputted Image
    public void setComposerImage(String imageURL, javax.swing.JLabel labelName) throws Exception{
        //ex. imageURL = "https://assets.openopus.org/portraits/12091447-1568084857.jpg"
        
        if (imageURL == null)
            return;
        
        URL url = new URL(imageURL);
        BufferedImage c = ImageIO.read(url);
        labelName.setIcon(new javax.swing.ImageIcon(c));
    }
    
    
    //All of the search possibilities
    
    /*List of search endpoints:
    
    List popular composers
    GET /composer/list/pop.json
    
    List essential composers
    GET /composer/list/rec.json
    
    List composers by first letter 
    GET /composer/list/name/a.json  
    
    List composers by period
    GET /composer/list/epoch/Early Romantic.json
    
        Medieval
        Renaissance
        Baroque
        Classical
        Early Romantic
        Romantic
        Late Romantic
        20th Century
        Post-War
        21st Century
    
    Search composers by name
    GET /composer/list/search/bruc.json
    
    List composers by ID
    GET /composer/list/ids/186,52.json
    
    List genres by composer ID
    GET /genre/list/composer/2.json
    
    List works by composer ID
    GET /work/list/composer/129/genre/all.json
    
    List genres by composer ID
    GET /genre/list/composer/2.json

    List works by composer ID
    GET /work/list/composer/129/genre/all.json
    
    List popular works by composer ID
    GET /work/list/composer/129/genre/Popular.json
    
    List essential works by composer ID
    GET /work/list/composer/129/genre/Recommended.json
    
    List works by composer ID and genre
    GET /work/list/composer/2/Orchestral.json

    Search works by composer ID and title
    GET /work/list/composer/196/genre/all/search/Sonata.json
    
    Search works by composer ID, genre and title
    GET /work/list/composer/145/genre/Chamber/search/Cello Sonata.json
    
    Detail work by ID
    GET /work/detail/15076.json
    
    List works by ID
    GET /work/list/ids/15076,24963.json
    
    Omnisearch
    Search works and composers by name/title
    GET /omnisearch/beeth/0.json
    
    List random works
    POST /dyn/work/random
        popularwork	1	Return only popular compositions
        recommendedwork	1	Return only essential compositions
        popularcomposer	1	Return only works by famous composers
        recommendedcomposer	1	Return only works by essential composers
        genre	All	Return only works of a certain genre
        epoch	All	Return only works from a certain period
        composer	196,183	Return only works by specific composers
        composer_not	165,3	Don't return works by certain composers
        work	16642,16578,16595	Return only works from a list
    
    List roles by names
    POST /dyn/performer/list
        names	["Herbert von Karajan", "Sviatoslav Richter", "Berliner Philharmoniker"]
    
    Work guesser, bulk discover composer and work IDs by title
    POST /dyn/work/guess
        works	[{"composer":"Igor Stravinsky","title":"Le sacre du printemps"},{"composer":"Anton Bruckner","title":"Symphony no 4"},{"composer":"Ferruccio Busoni", "title":"Piano concerto, op. 39"}]
    */
    
    
    
    //--------------------------------------------------------------------------
    //Search function, can function with or without text.
    public void search(String text) throws Exception{
        
        //Where the main search takes place
        Playlist playlist = generatePlaylist(text);
        
        if(playlist != null){
            /*for (Piece piece : playlist.getMusic().getList()){
                System.out.println(piece);
            }*/
            buildTable(playlist, Search_PieceTable);
        }
        else{
            System.out.println("NO SEARCH RESULTS");
        }
    }
    //--------------------------------------------------------------------------
    
    
    // Main search Algorithm!!!
    // Generates a playlist and accounts for parameters (Checkboxes and DropBoxes) when searcing for pieces
    // Used for both search and for generating a user playlist
    public Playlist generatePlaylist(String text) throws Exception{
        
        //All searches are formatted into a playlist
        Playlist playlist = new Playlist();
        
        //For searching only composers
        boolean searchComposers = false;
        List<Composer> composerSearch;
        Piece composerPiece;
        searchComposers = SearchComposers_CheckBox.isSelected();
        /*if (text.length() > 3 && !searchComposers){
            searchComposers = text.substring(0,4).contains("by: ");
        }*/
        
        
        //Adds composers to playlist if its a composer search
        if (searchComposers){
            System.out.println("Search Composers Activated");
            playlist.setName("Composers");
            
            if (!(PopularWorks_CheckBox.isSelected()
                || EssentialWorks_CheckBox.isSelected()
                || (String)Epoch_ComboBox.getSelectedItem() != "None"
                || (String)Genre_ComboBox.getSelectedItem() != "None")){
                //formats composer search to yeild best results from API call
                int composerSearch_startIndex = 0;
                if (text.contains("by: ")){
                    composerSearch_startIndex = text.indexOf("by: ") + 4;
                }
                composerSearch = searchComposers(text.substring(composerSearch_startIndex)).getComposers();
                if (composerSearch != null){
                    for (int i = 0; i < composerSearch.size(); i++){
                            composerPiece = new Piece(null, composerSearch.get(i));
                            playlist.add(composerPiece);
                    }

                    //Sets composer portrait
                    if(playlist.getMusic().getList().get(0) != null){
                        String image = playlist.getMusic().getList().get(0).getComposer().getPortrait();
                        setComposerImage(image, Search_ComposerImageLabel);
                    }
                }
            }
            
            //Assumes there is no text in the textfield. If you have 'Search Composer' selected 
            //along with another customization, your searchbar text won't be interpreted.
            else{
                // /composer/list/epoch/Early Romantic.json
                MusicalInformation composersInfo = getRequest("/composer/list/epoch/" + URLEncoder.encode((String)Epoch_ComboBox.getSelectedItem(), StandardCharsets.UTF_8) + ".json");
                
                
                if (composersInfo.getComposers() != null){
                    playlist.addComposers((ArrayList<Composer>) composersInfo.getComposers());

                }
            }
        }
        
        
        // Checks if we should use "customized search", if there is text "by: 'composer name'" and a customization is selected
        else if (Search_SearchBar.getText().contains("by:")
                && (PopularWorks_CheckBox.isSelected()
                || EssentialWorks_CheckBox.isSelected()
                || (String)Epoch_ComboBox.getSelectedItem() != "None"
                || (String)Genre_ComboBox.getSelectedItem() != "None")){
            
            System.out.println("Customized Search Activated");
            //performs customized search for pieces using parameters
            int composerSearch_startIndex = 0;
            if (text.contains("by: ")){
                composerSearch_startIndex = text.indexOf("by: ") + 4;
            }
            composerSearch = searchComposers(text.substring(composerSearch_startIndex)).getComposers();
            //System.out.println(composerSearch.get(0).getName());
            List<String> params = new ArrayList<String>();
            List<String> vals = new ArrayList<String>();
                
            params = getParams();
            params.add("composer");
            vals = getVals();
            vals.add(composerSearch.get(0).getId());
                
            if (getRandomWorks(params, vals).getWorks() != null){
                playlist.addWorks((ArrayList<Work>)getRandomWorks(params, vals).getWorks());
            }
        }
        
        
        // If search text field is blank, but 1 or more customizations are selected
        else if (Search_SearchBar.getText().equals("")
                && (PopularWorks_CheckBox.isSelected()
                || EssentialWorks_CheckBox.isSelected()
                || (String)Epoch_ComboBox.getSelectedItem() != "None"
                || (String)Genre_ComboBox.getSelectedItem() != "None")){
            
            System.out.println("Customized Search 2 Activated");
            List<String> params = new ArrayList<String>();
            List<String> vals = new ArrayList<String>();
                
            params = getParams();
            vals = getVals();
            
            if (getRandomWorks(params, vals).getWorks() != null){
                playlist.addWorks((ArrayList<Work>)getRandomWorks(params, vals).getWorks());
            }
        }
        
        
        //If all else does not apply, perform a Regular Search
        else {
            System.out.println("Regular Search Activated");
            playlist.setName("Works");
            
            MusicalInformation guessWorks = workGuesser(text);
            MusicalInformation omniSearch = omniSearch(text);

            List<Piece> omniPieces = omniSearch.getResults();

            //gets the guessedWork
            if ((guessWorks.getWorks() != null && guessWorks.getComposers() != null)){
                Piece piece1 = new Piece(guessWorks.getWorks().get(0).getGuessed(), guessWorks.getComposers().get(0).getGuessed());
                playlist.add(piece1);
            }
            //gets a list of similar omniWorks
            if (omniPieces != null){
                //Starts at index 1 because index 0 does not contain a work and only a composer
                for (int i = 1; i < omniPieces.size(); i++){
                    if (omniPieces.get(i).getWork() != null){
                        playlist.add(omniPieces.get(i));
                    }
                }
            }

            if (playlist.getSize() >= 1){
                String image = playlist.getMusic().getList().get(0).getComposer().getPortrait();
                setComposerImage(image, Search_ComposerImageLabel);
            }
        }

        return playlist;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    //Creates a playlist of reccomended Works based off of your currenlty saved composers and music
    public Playlist getReccomendedWorks() throws Exception{
        
        if (playlists == null) {
            return null;
        }
        
        Playlist playlist = new Playlist("Reccomended Music");
        
        int i = 0;
        //loops through your first 5 playlists
        for (Playlist userPlaylist : playlists){
            if (i >= 5 || userPlaylist.getMusic() == null){
                break;
            }
            int z = 0;
            //only uses first 5 pieces in each playlist
            for (Piece userPiece : userPlaylist.getMusic().getList()){
                
                if (z >= 5){
                    break;
                }
                //for each piece it looks at, it adds a similar piece to that one to your reccomended playlist
                if (userPiece.getWork() != null){
                    playlist.add(getSimilarPieces(userPiece).getMusic().getList().get(0));
                }
                else if (userPiece.getComposer() != null){
                    playlist.add(getWorksByComposer(userPiece.getComposer()).getMusic().getList().get(0));
                }
                z++;
            }
            i++;
        }
        
        return playlist;
    }
    
    //Returns a list of reccomended composers based off of your music and saved composers
    public Playlist getReccomendedComposers() throws Exception{
        
        Playlist playlist = new Playlist("Reccomended Composers");
        
        if (playlists == null) {
            return null;
        }
        
        int i = 0;
        for (Playlist userPlaylist : playlists){
            if (i >= 5 || userPlaylist.getMusic() == null){
                break;
            }
            int z = 0;
            for (Piece userPiece : userPlaylist.getMusic().getList()){
                
                if (z >= 5){
                    break;
                }
                if (userPiece.getComposer() != null){
                    playlist.add(new Piece(null, userPiece.getComposer()));
                }
                z++;
            }
            i++;
        }
        
        return playlist;
    }
    
    
    
    
    //Intakes a piece and returns a Playlist of pieces similar to that one
    public Playlist getSimilarPieces(Piece piece) throws Exception{
        if (piece == null){
            System.out.println("Piece is null");
            return null;
        }
        
        //Stores generated playlist here
        Playlist playlist = new Playlist("Similar Pieces");
        
        Composer composer = piece.getComposer();
        Work work = piece.getWork();
        List<String> params = new ArrayList<String>();
        List<String> keys = new ArrayList<String>();
        
        //gets the parameters of the inputted piece to allow us to search for pieces with similar parameters
        if(work.getGenre() != null){
            params.add("genre");
            keys.add(work.getGenre());
        }
        if(work.getEpoch() != null){
            params.add("epoch");
            keys.add(work.getEpoch());
        }
        
        MusicalInformation similarPlaylist = getRandomWorks(params, keys);
        List<Work> similarWorks = similarPlaylist.getWorks();
        List<Piece> similarPieces = new ArrayList<Piece>();
        for (Work w : similarWorks){
            similarPieces.add(new Piece(w, w.getComposer()));
        }
        
        //PieceHeap results = new PieceHeap();
        for (Piece result : similarPieces){
            playlist.add(result);
        }        
        return playlist;
    }
    
    
    //intakes a composer and outputs a playlist of their works
    public Playlist getWorksByComposer(Composer composer) throws Exception{ //find similar composers button?
        
        if (composer == null){
            //System.out.println("Composer is null");
            return null;
        }
        
        Playlist playlist = new Playlist("Works by Comoposer");
        //creates API request to search for works by the inputted composer
        MusicalInformation composerPlaylist  = getRandomWorks("composer", composer.getId());
        List<Work> composerWorks = composerPlaylist.getWorks();
        List<Piece> composerPieces = new ArrayList<Piece>();
        
        for (Work w : composerWorks){
            composerPieces.add(new Piece(w, w.getComposer()));
        }
        for (Piece result : composerPieces){
            playlist.add(result);
        }
        
        return playlist;
    }
    
    

    
    
    
    
    //Gets random pieces of music based off of multiple parameters
    public MusicalInformation getRandomWorks(List<String> params, List<String> vals) throws Exception{
        return postRequest("/dyn/work/random/", params, vals);
    }
    //Gets random pieces of music based off of only one parameters
    public MusicalInformation getRandomWorks(String param, String val) throws Exception{
        return postRequest("/dyn/work/random/", param, val);
    }
    //General search
    public MusicalInformation omniSearch(String text) throws Exception{
        // /omnisearch/beeth/0.json
        int offset = 0; //potentially make random in future
        return getRequest("/omnisearch/" + URLEncoder.encode(format_omniSearch(text, " by: "), StandardCharsets.UTF_8) + "/" + offset + ".json");
    }
    //Search for specific piece of music
    public MusicalInformation workGuesser(String text) throws Exception{
        return postRequest("/dyn/work/guess/", "works", format_workGuesser(text, " by: "));
    }
    public MusicalInformation searchComposers(String text) throws Exception{
        //String composerName = "";
        //if (text.contains("by"))
        //    composerName = text.substring(0, text.indexOf("by")) + text.substring(text.indexOf("by" + 2));
        //System.out.println("searchComposers :: /composer/list/search/" + URLEncoder.encode(format_omniSearch(text, "by: "), StandardCharsets.UTF_8) + ".json");
        return getRequest("/composer/list/search/" + URLEncoder.encode(format_omniSearch(text, "by:"), StandardCharsets.UTF_8) + ".json");
    }
    
    
    
    
    
    
    
    
    
    
    
    //intakes a composer and returns it's image
    //sometimes a composer doesn't contain an image already and we need
    //to search for that composer and get the image manually from the API
    public String getComposerImage(Composer comp) throws Exception{
        
        MusicalInformation results = searchComposers(comp.getComplete_name());
        if (results.getComposers() != null){
            Composer composer = results.getComposers().get(0);
            return composer.getPortrait();
        }
        return null;
    }
    
    //gets the currently selected parameters for search
    public ArrayList<String> getParams(){
        
        ArrayList<String> params = new ArrayList<String>();
        /*if(searching for composer){
            
        }*/
        if(PopularWorks_CheckBox.isSelected()){
            params.add("popularwork");
        }
        if(EssentialWorks_CheckBox.isSelected()){
            params.add("recommendedwork");
        }
        if((String)Epoch_ComboBox.getSelectedItem() != "None"){
            params.add("epoch");
        }
        if((String)Genre_ComboBox.getSelectedItem() != "None"){
            params.add("genre");
        }
        
        return params;
    }
    
    //gets the values to accompany the above parameters
    public ArrayList<String> getVals(){
        
         ArrayList<String> vals = new ArrayList<String>();
        /*if(searching for composer){
            
        }*/
        if(PopularWorks_CheckBox.isSelected()){
            vals.add("1");
        }
        if(EssentialWorks_CheckBox.isSelected()){
            vals.add("1");
        }
        if((String)Epoch_ComboBox.getSelectedItem() != "None"){
            vals.add( URLEncoder.encode((String)Epoch_ComboBox.getSelectedItem(), StandardCharsets.UTF_8) );
        }
        if((String)Genre_ComboBox.getSelectedItem() != "None"){
            vals.add( URLEncoder.encode((String)Genre_ComboBox.getSelectedItem(), StandardCharsets.UTF_8) );
        }
        
        return vals;
        
    }
    
    
    // Formats text for workGuesser API call
    public String format_workGuesser(String text, String delimiter) throws Exception {
        // How it's formatted ::
        // Symphony no.6 by Beethoven
        // [{"composer":"Ludwig van Beethoven","title":"Symphony no.6"}]
        
        String workName = "";
        String inputComposer = "";
        String composerName = "";
        
        if (text.contains(delimiter)){
            inputComposer = text.substring(text.indexOf(delimiter) + delimiter.length());
            workName = text.substring(0, text.indexOf(delimiter));
        }
        
        if (inputComposer != ""){
            if (omniSearch(inputComposer) != null){
                composerName = omniSearch(inputComposer).getResults().get(0).getComposer().getComplete_name();
            }
        }
        
        return "[{\"composer\":\"" + composerName + "\",\"title\":\"" + workName + "\"}]";
    }
    //Formats text for omniSearch API call
    public String format_omniSearch(String text, String delimiter) throws Exception {
        
        String workName = "";
        String inputComposer = "";
        String composerName = "";
        
        if (text.contains(delimiter)){
            inputComposer = text.substring(text.indexOf(delimiter) + delimiter.length());
            workName = text.substring(0, text.indexOf(delimiter));
        }
        else
            return text;
        
        return workName + " " + inputComposer;
    }
    
    
    //fills any table you need
    public void buildTable(Playlist playlist, javax.swing.JTable tableName){
        
        // if playlist is empty
        if (playlist == null){
            
            Object[] columnNames = {"Playlist"};
            Object[][] blankData = new Object[8][1];
            for (int idx = 0; idx < 8; idx++){
                blankData[idx][0] = new Piece();
            }
            DefaultTableModel model = new DefaultTableModel(blankData, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                   return false;
                }
            };
        
            tableName.setModel(model);
            
            
        // if playlist has items in it
        } else if (playlist.getMusic() != null){ 
            int dataLength = Math.max(playlist.getSize(), 8);
            Piece[][] data = new Piece[dataLength][1];
            
            // Sets table columns
            Object[] columnNames = {"Playlist"};
            if (playlist.getName() != null){
                columnNames = new Object[]{playlist.getName()};
            }
            
            int i = 0;
            ArrayList<String> duplicateCheck = new ArrayList<String>();
            for (Piece piece : playlist.getMusic().getList()){
                if (piece.getComposer() != null || piece.getWork() != null){
                    
                    
                    // Disallows for Duplicates!!!
                    String workTitle = "";
                    String composerName = "";
                    if (piece.getWork() != null)
                        workTitle = piece.getWork().getTitle();
                    if (piece.getComposer() != null)
                        composerName = piece.getComposer().getName();
                    
                    //sets duplicateChecker for each piece
                    piece.setDuplicateChecker(workTitle + composerName);
                    
                    //If a piece is a duplicate (title and composer are the same)
                    if (!duplicateCheck.contains(piece.getDuplicateChecker())){
                        data[i][0] = piece;
                        i++;
                    }
                    duplicateCheck.add(piece.getDuplicateChecker());
                    
                    
                }
            }

            if (playlist.getSize() < 8){
                for (int idx = playlist.getSize(); idx < 8; idx++){
                    data[idx][0] = new Piece();
                }
            }
            
            //System.out.println("\n\nsimilarPiece" + data[0][0].getWork().getTitle());
            DefaultTableModel model = new DefaultTableModel(data, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                   //all cells false
                   return false;
                }
            };
            //System.out.println("\nTable data: " + data[0][0].getWork().getTitle() + "\n");
            tableName.setModel(model);
        }
        Search_PieceTable.repaint();
    }
    
    
    //builds playlist table
    public void buildPlaylistTable(ArrayList<Playlist> playlists) {
        
        if (playlists == null){ // if playlist is empty
            Object[] columnNames = {"Saved Playlists"};
            Object[][] blankData = new Object[15][1];
            for (int idx = 0; idx < 15; idx++){
                blankData[idx][0] = new Piece();
            }
            DefaultTableModel model = new DefaultTableModel(blankData, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                   return false;
                }
            };
            Playlists_SavedPlaylistTable.setModel(model);
            
        } else{ // if playlist has items in it
            int dataLength = Math.max(playlists.size(), 15);
            Object[][] data = new Object[dataLength][1];
            Object[] columnNames = {"Saved Playlists"};
            int i = 0;
            for (Playlist playlist : playlists){
                if (playlist != null){
                    data[i][0] = playlist;
                    i++;
                }
            }
            if (playlists.size() < 15){
                for (int idx = playlists.size(); idx < 15; idx++){
                    data[idx][0] = new Playlist();
                }
            }
            DefaultTableModel model = new DefaultTableModel(data, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                   //all cells false
                   return false;
                }
            };
            Playlists_SavedPlaylistTable.setModel(model);
        }
    }
    
    //builds comboBoxes that need to contain the 'playlists'
    public void buildComboBox(){
        jComboBox1.removeAllItems();
        jComboBox2.removeAllItems();
        for (Playlist playlist : playlists){
            jComboBox1.addItem(playlist.getName());
            jComboBox2.addItem(playlist.getName());
        }
    }
    
    public boolean isCellEditable(int row, int column){
            return false;
        }
}